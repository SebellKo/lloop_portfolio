{"version":3,"sources":["main.jsx","App.js","reportWebVitals.js","index.js"],"names":["Main","useEffect","scene","camera","renderer","trackballControls","light","clock","THREE","background","window","innerWidth","innerHeight","position","set","axesHelper","add","texture","load","geometry","material","map","terminalWindow","rotation","x","color","setSize","document","getElementById","appendChild","domElement","TrackballControls","init","render","update","getDelta","requestAnimationFrame","id","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"gNAiEeA,MA7Df,WAsDI,OArDAC,qBAAU,WACN,IAAIC,EAAOC,EAAQC,EAAUC,EAAmBC,EAAOC,GAS5C,YAEPL,EAAQ,IAAIM,KACNC,WAAa,IAAID,IAAY,WACnCL,EAAS,IAAIK,IAAwB,GAAIE,OAAOC,WAAaD,OAAOE,YAAa,EAAG,MAC7EC,SAASC,IAAI,EAAG,EAAG,KAE1B,IAAIC,EAAa,IAAIP,IAAiB,IAGtCN,EAAMc,IAAID,GAEV,IAAIE,GAAU,IAAIT,KAAsBU,KAAK,kBACzCC,EAAW,IAAIX,IAAkB,IAAM,IAAK,IAC5CY,EAAW,IAAIZ,IAAwB,CAACa,IAAKJ,IAG7CK,EAAiB,IAAId,IAAWW,EAAUC,GAC9CE,EAAeC,SAASC,EAAI,EAC5BF,EAAeT,SAASC,IAAI,KAAM,IAAK,GACvCZ,EAAMc,IAAIM,GAEVhB,EAAQ,IAAIE,IAAuB,CAACiB,MAAO,WAC3CvB,EAAMc,IAAIV,IACVF,EAAW,IAAII,KACNkB,QAAQhB,OAAOC,WAAYD,OAAOE,aAC3Ce,SAASC,eAAe,QAAQC,YAAYzB,EAAS0B,YACrDzB,EAAoB,IAAI0B,IAAkB5B,EAAQC,EAAS0B,YAC3DvB,EAAQ,IAAIC,IAYhBwB,GAPa,SAATC,IAEA5B,EAAkB6B,OAAO3B,EAAM4B,YAC/BC,sBAAsBH,GACtB7B,EAAS6B,OAAO/B,EAAOC,GAI3B8B,KACD,IAEC,qBAAKI,GAAG,UCjDDC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAAShB,OACP,cAAC,IAAMiB,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASC,eAAe,SAM1BY,M","file":"static/js/main.e6e0fe67.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport * as THREE from 'three';\nimport {TrackballControls} from 'three/examples/jsm/controls/TrackballControls';\n\nfunction Main() {\n    useEffect(() => {\n        let scene, camera, renderer, trackballControls, light, clock;\n\n        // let createWindow = function()\n        // {\n            \n            \n        // }\n\n\n        let init = function()\n        {   \n            scene = new THREE.Scene();\n            scene.background = new THREE.Color(0xffffff);\n            camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);\n            camera.position.set(0, 0, 300);\n            // camera.lookAt(scene.position);\n            let axesHelper = new THREE.AxesHelper(50);\n            // let gridHelper = new THREE.GridHelper(100, 20);\n            // scene.add(gridHelper);\n            scene.add(axesHelper);\n\n            let texture = new THREE.TextureLoader().load('./terminal.jpg');\n            let geometry = new THREE.BoxGeometry(200 , 120, 50);\n            let material = new THREE.MeshBasicMaterial({map: texture});\n            \n            \n            let terminalWindow = new THREE.Mesh(geometry, material);\n            terminalWindow.rotation.x = 0;\n            terminalWindow.position.set(100, -100, 0);\n            scene.add(terminalWindow);\n\n            light = new THREE.DirectionalLight({color: 0xffffff});\n            scene.add(light);\n            renderer = new THREE.WebGLRenderer();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            document.getElementById('main').appendChild(renderer.domElement);\n            trackballControls = new TrackballControls(camera, renderer.domElement);\n            clock = new THREE.Clock();\n            // createWindow();\n            \n        }\n\n        let render = function()\n        {\n            trackballControls.update(clock.getDelta());\n            requestAnimationFrame(render);\n            renderer.render(scene, camera);\n        }\n\n        init();\n        render();\n    }, []);\n    return (\n        <div id=\"main\">\n            \n        </div>\n    );\n};\n\nexport default Main;\n","import Main from './main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}